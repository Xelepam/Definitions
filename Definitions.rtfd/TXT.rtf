{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica-BoldOblique;\f1\fswiss\fcharset0 Helvetica;\f2\fswiss\fcharset0 Helvetica-Bold;
\f3\fswiss\fcharset0 Helvetica-Oblique;\f4\fnil\fcharset0 Menlo-Regular;\f5\fnil\fcharset0 Menlo-Italic;
\f6\fnil\fcharset134 HiraginoSansGB-W3;\f7\fswiss\fcharset0 Helvetica-Light;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue10;\red251\green2\blue7;
\red191\green100\blue38;\red32\green32\blue32;\red153\green168\blue186;\red254\green187\blue91;\red173\green169\blue32;
\red109\green109\blue109;\red86\green132\blue173;\red88\green118\blue71;\red133\green96\blue154;\red255\green255\blue255;
\red154\green154\blue154;\red38\green38\blue38;\red26\green26\blue26;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c99942\c98555\c0;\cssrgb\c100000\c14913\c0;
\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c67843\c66275\c12549;
\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c52157\c37647\c60392;\cssrgb\c100000\c100000\c100000;
\cssrgb\c66667\c66667\c66667;\cssrgb\c20000\c20000\c20000;\cssrgb\c13333\c13333\c13333;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}
\margl1440\margr1440\vieww16400\viewh19580\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\i\b\fs24 \cf0 \ul \ulc0 Make sure Frontend & Backend are running simultaneously.\

\f1\i0\b0 \ulnone Frontend: cd frontend -> npm install -> npm start -> locahost:4200/movie-list\
Backend: run ExerciseApplication in IntelliJ -> localhost:8080/
\f2\b \
\cf2 \cb3 \
\
\cf4 \cb1 STEP 0:\cf0  
\f1\b0 \

\f3\i Inspect console on the Frontend.\

\f1\i0 \
	
\f2\b \cf4 A.
\f1\b0 \cf0  First go through updating a movies rating (clicking on the stars) without inspect on. Should say \'93Unable to update movie\'94.\
	
\f2\b \cf4 B.
\f1\b0 \cf0  Then, re-do it with the inspect console on with the network tab open. Error encountered should be the following:\
		\
		
\f2\b PUT http://localhost:4200/api/movie/1 405 (Method Not Allowed)\

\f1\b0 \
	
\f2\b \cf4 NOTE:\cf0  
\f1\b0 You want the network tab open because it shows what the frontend client is trying to call on the backend.\
\cb3 \
\

\f2\b \cf4 \cb1 STEP 1:\cf0 \

\f3\i\b0 In 
\f0\b MovieService.java 
\f3\b0 we first write the 
\f0\b public Movie putMovie(Movie movie)
\f3\b0  \ul method\ulnone  stub that takes in a 
\f0\b Movie
\f3\b0  \ul object \ulnone called \'93
\f0\b movie
\f3\b0 \'94 which will initially return 
\f0\b null
\f3\b0  to purposely 
\f0\b fail
\f3\b0  our first 
\f0\b @Test
\f3\b0 . Note that it should return a 
\f0\b Movie
\f3\b0  \ul object \ulnone per the declaration \'93public 
\f0\b Movie
\f3\b0 \'94. \
\
	
\f4\i0 \cf5 \cb6 public \cf7 Movie \cf8 putMovie\cf7 (Movie movie) \{\
    		\cf5 return null;\
\cf7 	\}\

\f3\i \cf0 \cb1 \
	
\f2\i0\b \cf4 A.\cf0  
\f1\b0 In 
\f2\b MovieServiceTest.java
\f1\b0  we need to write our first 
\f2\b @Test
\f1\b0  called 
\f2\b public void
\f1\b0  
\f2\b putMovieReturnsMovieWhenMovieIsPassedIn() \{ \}
\f1\b0 .
\f3\i  
\f1\i0 Initialize a new 
\f2\b Movie
\f1\b0 \ul  object\ulnone  \'93
\f2\b movie1
\f1\b0 \'94 inside this method and set its 4 parameters (
\f3\i id
\f1\i0 , 
\f3\i name
\f1\i0 , 
\f3\i description
\f1\i0 , and 
\f3\i rating
\f1\i0 ), then declare an 
\f2\b assertEquals
\f1\b0  on the new initialized 
\f2\b Movie
\f1\b0  \ul object\ulnone  \'93
\f2\b movie1
\f1\b0 \'94 and the new 
\f2\b putMovie 
\f1\b0 \ul method\ulnone  stub written in 
\f2\b movieService.java 
\f1\b0 that returns 
\f2\b null 
\f1\b0 with \'93
\f2\b movie1
\f1\b0 \'94 passed into it
\f2\b :
\f1\b0  \
\
	
\f2\b Test #1
\f1\b0 \
	
\f4 \cf9 \cb6 @Test \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf5 	 public void \cf8 putMovieReturnsMovieWhenMovieIsPassedIn\cf7 () \{\
     \cf10 //Initialize a new Movie Object\
    	\cf7 Movie movie1 = \cf5 new \cf7 Movie()\cf5 ;\
    	\cf7 movie1.setId(\cf11 123L\cf7 )\cf5 ;\
    	\cf7 movie1.setName(\cf12 "Movie 1"\cf7 )\cf5 ;\
    	\cf7 movie1.setDescription(\cf12 "Movie 1 description"\cf7 )\cf5 ;\
    	\cf7 movie1.setRating(Rating.
\f5\i \cf13 BAD
\f4\i0 \cf7 )\cf5 ;\
\
    	
\f5\i \cf7 assertEquals
\f4\i0 (movie1\cf5 , \cf13 movieService\cf7 .putMovie(movie1))\cf5 ;\
\cf7 	 \}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1 \cf0 \cb1 \
	
\f2\b \cf4 NOTE:\cf0  @Test
\f1\b0  should 
\f2\b fail
\f1\b0  at this point:\
 \
		java.lang.AssertionError: \
		Expected: com.cognizant.digital.technology.exercise.entity.Movie@7986fd49\
		Actual: null\
\
	
\f2\b \cf4 B.\cf0  
\f1\b0 Now that we have our error we can go and update our stub in 
\f2\b MovieService.java
\f1\b0  to return 
\f2\b movie 
\f1\b0 so that our 
\f2\b @Test public void
\f1\b0  
\f2\b putMovieReturnsMovieWhenMovieIsPassedIn() \{ \}
\f1\b0  passes:\
\
	
\f4 \cf5 \cb6 public \cf7 Movie \cf8 putMovie\cf7 (Movie movie) \{\
    		\cf5 return \cf7 movie\cf5 ;\
\cf7 	\}\

\f1 \cf0 \cb1 \
	
\f2\b \cf4 NOTE
\f1\b0 :\cf0  Running the 
\f2\b @Test
\f1\b0  once more and the test should 
\f2\b pass
\f1\b0  at this point.\
\
	
\f2\b \cf4 C.\cf0  
\f1\b0 Now we write our second 
\f2\b @Test 
\f1\b0 called 
\f2\b public void putMovieCallsMovieRepositorySavesMovie() \{ \} 
\f1\b0 in 
\f2\b MovieServiceTest.java
\f1\b0 . Initialize a new 
\f2\b Movie
\f1\b0  \ul object\ulnone  \'93
\f2\b movie1
\f1\b0 \'94 inside this \ul method\ulnone  and set its 4 parameters (
\f3\i id
\f1\i0 , 
\f3\i name
\f1\i0 , 
\f3\i description
\f1\i0 , and 
\f3\i rating
\f1\i0 ). Now we need to declare 
\f2\b Mockito
\f1\b0  
\f2\b .when()
\f1\b0 , 
\f2\b .thenReturn()
\f1\b0 , and 
\f2\b .verify()
\f1\b0  on this new initialized 
\f2\b Movie
\f1\b0  \ul object\ulnone  \'93
\f2\b movie1
\f1\b0 \'94 and our 
\f2\b mockedMovieRepository
\f1\b0 :
\f2\b  \
\
	Test #2\
	
\f4\b0 \cf9 \cb6 @Test\
\cf5 	public void \cf8 putMovieCallsMovieRepositorySavesMovie\cf7 () \{\
     \cf10 //Initialize a new Movie Object (Note: This logic should be set up in the @Before so one avoids having to 	write this repetitive code.)\
    		\cf7 Movie movie1 = \cf5 new \cf7 Movie()\cf5 ;\
    		\cf7 movie1.setId(\cf11 123L\cf7 )\cf5 ;\
    		\cf7 movie1.setName(\cf12 "Movie 1"\cf7 )\cf5 ;\
    		\cf7 movie1.setDescription(\cf12 "Movie 1 description"\cf7 )\cf5 ;\
    		\cf7 movie1.setRating(Rating.
\f5\i \cf13 BAD
\f4\i0 \cf7 )\cf5 ;\
\
    		\cf7 Mockito.
\f5\i when
\f4\i0 (\cf13 mockedMovieRepository\cf7 .save(movie1)).thenReturn(movie1)\cf5 ;\
   		\cf13 movieService\cf7 .putMovie(movie1)\cf5 ;\
    		\cf7 Mockito.
\f5\i verify
\f4\i0 (\cf13 mockedMovieRepository\cf7 ).save(movie1)\cf5 ;\
\cf7 	\}\

\f2\b \cf0 \cb1 \
	\cf4 NOTE:\cf0  @Test
\f1\b0  should 
\f2\b fail
\f1\b0  at this point because in 
\f2\b MovieService.java 
\f1\b0 we are still returning 
\f2\b movie
\f1\b0 . I.e. we are not 
\f2\b saving
\f1\b0  the movie passed in into the 
\f2\b putMovie()
\f1\b0  \ul method\ulnone  to the 
\f2\b movieRepository
\f1\b0  yet. \
\
	
\f2\b \cf4 D.\cf0  
\f1\b0  Now that we have our error we can go and update our stub in 
\f2\b MovieService.java 
\f1\b0 to return 
\f2\b movieRepository.save(movie)
\f1\b0  so that our 
\f2\b @Test
\f1\b0  
\f2\b public void putMovieCallsMovieRepositorySavesMovie() \{ \} 
\f1\b0 passes: \
\
	
\f4 \cf5 \cb6 public \cf7 Movie \cf8 putMovie\cf7 (Movie movie) \{\
    		\cf5 return \cf13 movieRepository\cf7 .save(movie)\cf5 ;\
\cf7 	\}\

\f2\b \cf0 \cb1 \
	\cf4 NOTE:\cf0  
\f1\b0 Running the 
\f2\b @Test 
\f1\b0 once more and the test should pass at this point. At this point we are done with 
\f2\b MovieService.java
\f1\b0  and 
\f2\b MovieServiceTest.java\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb3 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf4 \cb1 STEP 2: \

\f3\i\b0 \cf0 In 
\f0\b MovieController.java 
\f3\b0 we first write the 
\f0\b @PutMapping(\'93/\{movieId\}\'94)
\f3\b0  
\f0\b public ResponseEntity<Movie> put(@PathVariable long movieId, @RequestBody Movie movie)
\f3\b0  \ul method\ulnone  stub that takes in a 
\f0\b @PathVariable
\f3\b0  of the 
\f0\b long
\f3\b0  \ul data type\ulnone  called \'93
\f0\b movieId
\f3\b0 \'94  and a 
\f0\b @RequestBody Movie
\f3\b0  \ul object\ulnone  called \'93
\f0\b movie
\f3\b0 \'94 and it will initially return 
\f0\b null
\f3\b0  to purposely 
\f0\b fail 
\f3\b0 our third 
\f0\b @Test
\f3\b0 . Note that it should return a 
\f0\b ResponseEntity<Movie>
\f3\b0  \ul object\ulnone  per the declaration \'93public 
\f0\b ResponseEntity<Movie>
\f3\b0 \'94. \
\
	
\f4\i0 \cf9 \cb6 @PutMapping\cf7 (\cf12 "/\{movieId\}"\cf7 )\
\cf5 	public \cf7 ResponseEntity<Movie> \cf8 put\cf7 (\cf9 @PathVariable \cf5 long \cf7 movieId\cf5 , \cf9 @RequestBody \cf7 Movie movie) \{\
    		\cf5 return null;\
\cf7 	\}\

\f1 \cf0 \cb1 \

\f2\b \cf4 	A.\cf0  
\f1\b0 In 
\f2\b MovieControllerTest.java
\f1\b0  we need to write our third 
\f2\b @Test
\f1\b0  called 
\f2\b public void
\f1\b0  
\f2\b putReturns200WhenMovieIsPassed() \{ \}
\f1\b0 .
\f3\i  
\f1\i0 Initialize a new 
\f2\b ResponseEntity<Movie>
\f1\b0  \ul object\ulnone  called \'93
\f2\b response
\f1\b0 \'94 and set it equal to 
\f2\b movieController
\f1\b0  and call the 
\f2\b .put()
\f1\b0  \ul method\ulnone  with
\f2\b  movie2 ID
\f1\b0  \'93
\f2\b 123L
\f1\b0 \'94 and 
\f2\b movie2 Movie
\f1\b0  \ul object\ulnone  passed inside this 
\f2\b .put()
\f1\b0  \ul method\ulnone . Then declare an 
\f2\b assertEquals
\f1\b0  to verify http status codes match between 
\f2\b response
\f1\b0  and 
\f2\b HttpStatus.OK
\f1\b0 :\
\
	
\f2\b Test #3
\f1\b0 	\
	
\f4 \cf9 \cb6 @Test\
\cf5 	public void \cf8 putReturns200WhenMovieIsPassed\cf7 () \{\
    		ResponseEntity<Movie> response = \cf13 movieController\cf7 .put(\cf11 123L\cf5 , \cf13 movie2\cf7 )\cf5 ;\
\
    		
\f5\i \cf7 assertEquals
\f4\i0 (HttpStatus.
\f5\i \cf13 OK
\f4\i0 \cf5 , \cf7 response.getStatusCode())\cf5 ;\
\cf7 \}\

\f1 \cf0 \cb1 \

\f2\b \cf4 	NOTE:\cf0  @Test
\f1\b0  should 
\f2\b fail
\f1\b0  at this point:\
\
		java.lang.NullPointerException\
\
	
\f2\b \cf4 B. 
\f1\b0 \cf0 Now that we have our error we can go and update our stub in 
\f2\b MovieController.java 
\f1\b0 to return a 
\f2\b new ResponseEntity<>(HttpStatus.OK)
\f1\b0  so that our 
\f2\b @Test public void putReturns200WhenMovieIsPassed() \{ \}
\f1\b0  passes:\
\
	
\f4 \cf9 \cb6 @PutMapping\cf7 (\cf12 "/\{movieId\}"\cf7 )\
\cf5 	public \cf7 ResponseEntity<Movie> \cf8 put\cf7 (\cf9 @PathVariable \cf5 long \cf7 movieId\cf5 , \cf9 @RequestBody \cf7 Movie movie) \{\
    		\cf5 return new \cf7 ResponseEntity<>(HttpStatus.
\f5\i \cf13 OK
\f4\i0 \cf7 )\cf5 ;\
\cf7 	\}\

\f1 \cf0 \cb1 \
	
\f2\b \cf4 NOTE
\f1\b0 :\cf0  Running the 
\f2\b @Test
\f1\b0  once more and the test should 
\f2\b pass
\f1\b0  at this point.\
\
	
\f2\b \cf4 C. 
\f1\b0 \cf2 Now we write out fourth 
\f2\b @Test 
\f1\b0 called 
\f2\b public void putCallsMovieServiceWhenMovieIsPassed() \{ \} 
\f1\b0 in 
\f2\b MovieControllerTest.java
\f1\b0 . We need to declare 
\f2\b Mockito
\f1\b0  
\f2\b .when()
\f1\b0 , 
\f2\b .thenReturn()
\f1\b0 , and 
\f2\b .verify() 
\f1\b0 on the 
\f2\b Movie
\f1\b0  \ul object\ulnone  \'93
\f2\b movie2
\f1\b0 \'94 and our 
\f2\b mockedMovieService 
\f1\b0 (this is set up in the @Before section):\
\
	
\f2\b Test #4
\f1\b0 \
	
\f4 \cf9 \cb6 @Test\
\cf5 	public void \cf8 putCallsMovieServiceWhenMovieIsPassed\cf7 () \{\
    		Mockito.
\f5\i when
\f4\i0 (\cf13 mockedMovieService\cf7 .putMovie(\cf13 movie2\cf7 )).thenReturn(\cf13 movie2\cf7 )\cf5 ;\
   		\cf13 movieController\cf7 .put(\cf11 123L\cf5 , \cf13 movie2\cf7 )\cf5 ;\
    		\cf7 Mockito.
\f5\i verify
\f4\i0 (\cf13 mockedMovieService\cf7 ).putMovie(\cf13 movie2\cf7 )\cf5 ;\
\cf7 	\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf2 \cb1 \
	\cf4 NOTE:\cf0  @Test
\f1\b0  should 
\f2\b fail
\f1\b0  at this point because in 
\f2\b MovieController.java 
\f1\b0 we are still returning 
\f2\b new ResponseEntity<>(HttpStatus.OK)
\f1\b0 . I.e. we are not interacting with 
\f2\b movieService 
\f1\b0 and have yet to 
\f2\b put
\f1\b0  the movie in the
\f2\b  movieService.
\f1\b0  \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf4 	D.\cf0  
\f1\b0  Now that we have our error we can go and update our stub in 
\f2\b MovieController.java 
\f1\b0 to return 
\f2\b new ResponseEntity<Movie>(result, HttpStatus.OK) so that our @Test \cf2 public void putCallsMovieServiceWhenMovieIsPassed() \{ \} 
\f1\b0 passes:\cf0 \
\
	
\f4 \cf9 \cb6 @PutMapping\cf7 (\cf12 "/\{movieId\}"\cf7 )\
\cf5 	public \cf7 ResponseEntity<Movie> \cf8 put\cf7 (\cf9 @PathVariable \cf5 long \cf7 movieId\cf5 , \cf9 @RequestBody \cf7 Movie movie) \{\
    		Movie result = \cf13 movieService\cf7 .putMovie(movie)\cf5 ;\
    	     return new \cf7 ResponseEntity<Movie>(result\cf5 , \cf7 HttpStatus.
\f5\i \cf13 OK
\f4\i0 \cf7 )\cf5 ;\
\cf7 \}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf2 \cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf4 	NOTE:\cf0  
\f1\b0 Running the 
\f2\b @Test 
\f1\b0 once more and the test should pass at this point.\
\
	
\f2\b \cf4 E.
\f1\b0 \cf0  We now write our final test. 
\f2\b @Test 
\f1\b0 number five called 
\f2\b public void putReturns404WhenMovieIsNotFound() \{ \} 
\f1\b0 in 
\f2\b MovieControllerTest.java
\f1\b0 . Initialize a new 
\f2\b ResponseEntity<Movie>
\f1\b0  \ul object\ulnone  called \'93
\f2\b response
\f1\b0 \'94 and set it equal to 
\f2\b movieController
\f1\b0  and call the 
\f2\b .put()
\f1\b0  \ul method\ulnone  with
\f2\b  
\f1\b0 the 
\f2\b anyLong() 
\f1\b0 \ul method\ulnone  as the 
\f2\b movieId 
\f1\b0 and 
\f2\b null 
\f1\b0 as the
\f2\b  Movie
\f1\b0  \ul object\ulnone  passed inside this 
\f2\b .put()
\f1\b0  \ul method\ulnone . Then declare an 
\f2\b assertEquals
\f1\b0  to verify http status codes match between 
\f2\b response
\f1\b0  and 
\f2\b HttpStatus.NOT_FOUND
\f1\b0 :\
\
	
\f2\b Test #5
\f1\b0 \
	
\f4 \cf9 \cb6 @Test\
\cf5 	public void \cf8 putReturns404WhenMovieIsNotFound\cf7 () \{\
    		ResponseEntity<Movie> response = \cf13 movieController\cf7 .put(
\f5\i anyLong
\f4\i0 ()\cf5 , null\cf7 )\cf5 ;\
    		
\f5\i \cf7 assertEquals
\f4\i0 (HttpStatus.
\f5\i \cf13 NOT_FOUND
\f4\i0 \cf5 , \cf7 response.getStatusCode())\cf5 ;\
\cf7 	\}\

\f1 \cf0 \cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf2 	\cf4 NOTE: \cf2 @Test 
\f1\b0 should fail at this point:\
	\
		java.lang.AssertionError: \
		Expected: 404\
		Actual: 200\
\
	
\f2\b \cf4 F. 
\f1\b0 \cf2 Now that we have our error we can go and update our stub in 
\f2\b MovieController.java
\f1\b0  with an 
\f2\b if
\f1\b0  \ul statement\ulnone  to catch this exception. \
\
	
\f4 \cf9 \cb6 @PutMapping\cf7 (\cf12 "/\{movieId\}"\cf7 )\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf5 	public \cf7 ResponseEntity<Movie> \cf8 put\cf7 (\cf9 @PathVariable \cf5 long \cf7 movieId\cf5 , \cf9 @RequestBody \cf7 Movie movie) \{\
    		Movie result = \cf13 movieService\cf7 .putMovie(movie)\cf5 ;\
\
    		if\cf7 (result == \cf5 null\cf7 ) \{\
        		\cf5 return new \cf7 ResponseEntity<>(HttpStatus.
\f5\i \cf13 NOT_FOUND
\f4\i0 \cf7 )\cf5 ;\
    		\cf7 \}\
\
    		\cf5 return new \cf7 ResponseEntity<Movie>(result\cf5 , \cf7 HttpStatus.
\f5\i \cf13 OK
\f4\i0 \cf7 )\cf5 ;\
\cf7 	\}\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf2 \cb1 \
	\cf4 NOTE:\cf0  
\f1\b0 Running the 
\f2\b @Test 
\f1\b0 once more and the test should pass at this point. At this point we are done with 
\f2\b MovieController.java
\f1\b0  and 
\f2\b MovieControllerTest.java\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \cb3 \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf4 \cb1 STEP 3:\cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f3\i\b0 \cf2 Now we terminate our old backend if it is still running with the old logic and re-run it with the new logic. Nothing needs to be done to the frontend, just navigate to localhost:4200/movie-list and refresh the page. Now, navigate to a movie and try to update its rating. At this point it should update.\
\

\f0\b \cf4 END
\f2\i0 \cf2 \
\
Misc:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf4 LAYERS\cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf2 Persistance Layer -> Repository -> Service -> Controller -> Frontend\
\'93You test a layer below\'94\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf4 FURTHER READING/TODO\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 1. Read up on 12 Factor Apps\
2. Read up on the API Gateway Pattern\
3. Listen to SE podcasts\
4. Take some Udemy classes on Springboot and Angular\
5. Read up on the h2 DB\
6. Read up on Test Driven Development\
7. Do the \'93Tour of Heroes\'94 tutorial by Angular\
8. Learn how to test Angular components with Jasmine+Karma\
9. Know how to merge to master branch and branch out for new features on git\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf4 FOR PRACTICE:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b0 \cf2 Make a Springboot App like the movie app with an Angular frontend but from scratch and then deploy it OR at least set it up to be deployed.\
Then make it more complex by adding another microservice.\
Check to see if there is a microservice springboot tutorial. 
\f2\b \
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf4 Define the following:\cf2 \
1. What is DevOps?\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \cb14 \expnd0\expndtw0\kerning0
A combination of software development (Dev) and operations (Ops). It is defined as a 
\f0\i\b \ul software engineering methodology
\f1\i0\b0 \ulnone  which aims to integrate the work of software development and software operations teams by facilitating a culture of collaboration and shared responsibility.\
\cb1 \kerning1\expnd0\expndtw0 \
\'93Plan -> Code -> Integrate -> Test -> Release -> Deploy -> Operate"\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf2 \
2. What is Continuous Development Continuous Integration (CDCI)?  
\f1\b0 *Note: One of many 
\f0\i\b \ul pipelines
\f2\i0 \ulnone \
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf16 \cb14 \expnd0\expndtw0\kerning0
Continuous Integration (CI) is a development practice that requires developers to integrate code into a shared repository several times a day. Each check-in is then verified by an automated build, allowing teams to detect problems early.\'a0\cb1 Continuous Deployment (CD) is closely related to Continuous Integration and refers to the release into production of software that passes the automated tests.\cb14 \
\
\cb1 The practices\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl120\slmult1\partightenfactor0
\ls1\ilvl0\cf16 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Maintain a single\'a0source\'a0repository\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Automate the build\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Make your build self-testing\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Every commit should build on an integration machine\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Keep the build fast\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Test in a clone of the production environment\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Make it easy for anyone to get the latest executable version\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Everyone can see what\'92s happening\'a0\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Automate deployment\uc0\u8232 \
\pard\pardeftab720\sl120\slmult1\partightenfactor0
\cf16 \
\
How to do it\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl120\slmult1\partightenfactor0
\ls2\ilvl0\cf16 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Developers check out code into their private workspaces\uc0\u8232 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
When done, commit the changes to the repository\uc0\u8232 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The CI server monitors the repository and checks out changes when they occur\uc0\u8232 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The CI server builds the system and runs unit and integration tests\uc0\u8232 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The CI server releases deployable artefacts for testing\uc0\u8232 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The CI server assigns a build label to the version of the code it just built\uc0\u8232 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The CI server informs the team of the successful build\uc0\u8232 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
If the build or tests fail, the CI server alerts the team\uc0\u8232 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
The team fixes the issue at the earliest opportunity\uc0\u8232 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Continue to continually integrate and test throughout the project\uc0\u8232 \
\pard\pardeftab720\sl120\slmult1\partightenfactor0
\cf16 \
Team responsibilities\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl120\slmult1\partightenfactor0
\ls3\ilvl0\cf16 \kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Check in frequently\uc0\u8232 \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Don\'92t check in broken code\uc0\u8232 \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Don\'92t check in untested code\uc0\u8232 \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Don\'92t check in when the build is broken\uc0\u8232 \
\ls3\ilvl0\kerning1\expnd0\expndtw0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
Don\'92t go home after checking in until the system builds
\f6\fs36 \
\pard\pardeftab720\sl120\slmult1\partightenfactor0

\f1\fs24 \cf2 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl120\slmult1\pardirnatural\partightenfactor0
\cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 Software: Jenkins, Bamboo, Travis CI, TeamCity\
\
\pard\pardeftab720\partightenfactor0
\cf17 \cb14 \expnd0\expndtw0\kerning0
The continuous delivery pipeline is an automated set of processes that use tools to compile, test, and deploy code for new software features. The purpose of a continuous delivery (CD) pipeline is to create a continuous management and release setting where bugs, compatibility issues, and security breaches are identified and fixed as early as possible. Also called the \'93deployment pipeline,\'94 the CD pipeline is the vehicle that drives iterative software application development. It breaks down the strategy of continuous integration and continuous delivery into stages so development teams can gather results incrementally, at each stage of the build. Developers are then able to run tests and make other assessments without having to wait until the entire workflow is completed.\
\
Stages:
\f7\fs32 \

\f1\fs24 \cf2 \cb1 \kerning1\expnd0\expndtw0 \'93Commit Stage -> Automated Acceptance Testing-> Continuous Deployment -> Production Release\'94\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b \cf2 \
3. What is Jenkins?\
\
4. What are Pivotal Web Services?\
\
5. What is a boot jar?\
\
6. What is boot run?\
\
7. What are Selenium tests?\
\
8. What is Zipkin?\
\
9. What is Spring Sleuth?\
\
10. What is SonarQube?\
\
11. Look up Typescript\
\
12. What is a unit test, integration test, smoke test, end to end test, component tests, api tests, gui tests, etc?\
\
13. What is Docker?\
\
14. config server\
\
15. What is blue-green / red-black deployment?\
\
16. Exceptions in Java\
\
17. Call by value\
\
18. Call by reference \
\
19. Know when Java uses call by value or reference\
\
20. Foreign key\
\
21. Inner Join\
\
22. Projection in Springboot\
\
23. What is Chef or Puppet?\
\
24. What are Microservices? \
\
25. What is a pipeline in software development?\
\
26. What is Gradle?\
\
27. What are Gradle tasks?\
\
28. What is Gradle dofirst and dolast?\
\
29. What are Grade test sets?\
\
\
\
\
}